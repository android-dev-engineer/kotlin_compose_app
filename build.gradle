import io.gitlab.arturbosch.detekt.Detekt

buildscript {
    ext {
        compose_ui_version = '1.4.2'
    }
}

plugins {
    id 'com.android.application' version '8.0.0' apply false
    id 'com.android.library' version '8.0.0' apply false
    id 'org.jetbrains.kotlin.android' version '1.8.20' apply false
    id 'org.jlleitschuh.gradle.ktlint' version '11.3.1' apply true
    id 'com.google.dagger.hilt.android' version '2.45' apply false
    id 'io.gitlab.arturbosch.detekt' version '1.22.0' apply false
    id 'com.google.devtools.ksp' version '1.8.20-1.0.11' apply false
    id 'jacoco' // Jacoco plugin: https://docs.gradle.org/current/userguide/jacoco_plugin.html#sec:jacoco_getting_started
}

subprojects {
    apply plugin: 'org.jlleitschuh.gradle.ktlint'
    apply plugin: 'io.gitlab.arturbosch.detekt'
    apply plugin: 'jacoco'

    afterEvaluate {
        android {
            // Jacoco config
            testOptions {
                reportDir "$project.buildDir/reports/androidTests/report"
                resultsDir "$project.buildDir/reports/androidTests/result"

                buildTypes {
                    debug.testCoverageEnabled = true
                    release.testCoverageEnabled = false
                }
            }
        }
    }

    task codeCoverage(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
        reports {
            html.required.set(true)
            html.outputLocation.set(file("${project.buildDir}/reports/jacoco"))
            xml.required.set(true) // It's required for Sonar
            xml.outputLocation.set(file("${project.buildDir}/reports/jacoco/jacoco.xml"))
        }
        def exclude = [
                '**/BuildConfig.*',
                '**/*$*',
                '**/Hilt_*.class',
                'hilt_**',
                'dagger/hilt/**',
                '**/*JsonAdapter.*'
        ]
        def mainSrc = "${project.projectDir}/src/main"
        def kotlinTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: exclude)

        sourceDirectories.from = file(mainSrc)
        classDirectories.from = files(kotlinTree)
        executionData.from = fileTree(dir: project.buildDir, includes: ['**/*.exec', '**/*.ec'])
    }

    ktlint {
        version = "0.48.2"
        android = true
        verbose = true
        reporters {
            reporter "html"
        }
        filter {
            include("**/*.kt")
            exclude("**/build/**")
        }
    }

    // Detekt options: https://detekt.dev/docs/gettingstarted/gradle#groovy-dsl-3
    detekt {
        parallel = true
        allRules = true
        autoCorrect = true
        buildUponDefaultConfig = true
        setSource(files(projectDir))
        config.setFrom(file("${rootProject.rootDir}/config/detekt/detekt.yml"))
    }

    tasks.withType(Detekt).configureEach {
        // Detekt leveraging Gradle's SourceTask: https://detekt.dev/docs/gettingstarted/gradle/#leveraging-gradles-sourcetask---excluding-and-including-source-files
        include("**/*.kt")
        exclude("**/build/**")
        jvmTarget = JavaVersion.VERSION_11

        reports {
            txt.required.set(false)
            sarif.required.set(false)
            md.required.set(false)
            xml.required.set(false)
            html.required.set(true)
            html.outputLocation.set(file("${project.buildDir}/reports/detekt/detekt.html"))
        }
    }

    // Jacoco Robolectric support
    tasks.withType(Test) {
        jacoco {
            includeNoLocationClasses = true
            excludes = ['jdk.internal.*'] // Java compatibility
        }
    }
}

// Gradle wrapper: https://docs.gradle.org/current/userguide/gradle_wrapper.html#customizing_wrapper
tasks.named('wrapper') {
    description = "Gradle wrapper task to update binary"
    gradleVersion = "8.1.1"
    distributionType = Wrapper.DistributionType.BIN
}