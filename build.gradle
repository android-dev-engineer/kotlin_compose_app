import io.gitlab.arturbosch.detekt.Detekt

buildscript {
    ext {
        compose_ui_version = '1.4.3'
        application_id = 'com.android.dev.engineer.kotlin.compose'
        version_name = "1.0"
    }
}

plugins {
    id 'com.android.application' version '7.4.2' apply false
    id 'com.android.library' version '7.4.2' apply false
    id 'org.jetbrains.kotlin.android' version '1.8.21' apply false
    id 'org.jlleitschuh.gradle.ktlint' version '11.3.2' apply true
    id 'io.gitlab.arturbosch.detekt' version '1.23.0' apply false
    id 'com.google.devtools.ksp' version '1.8.21-1.0.11' apply false
    id 'jacoco' // Jacoco plugin: https://docs.gradle.org/current/userguide/jacoco_plugin.html#sec:jacoco_getting_started
    id "org.sonarqube" version "4.0.0.2929"
}

subprojects {
    apply plugin: 'org.jlleitschuh.gradle.ktlint'
    apply plugin: 'io.gitlab.arturbosch.detekt'
    apply plugin: 'jacoco'

    afterEvaluate {
        android {
            testOptions {
                reportDir "$project.buildDir/reports/coverage/androidTest/debug/connected" // It's required for Sonar

                buildTypes {
                    // Jacoco config: It configures/enables createDebugCoverageReport task to be used in codeCoverage task below
                    debug.testCoverageEnabled = true
                }
            }

            // Jacoco options: https://docs.gradle.org/current/userguide/jacoco_plugin.html#default_values_of_the_jacoco_task_extension
            tasks.register('codeCoverage', JacocoReport) {
                dependsOn 'testDebugUnitTest', 'createDebugCoverageReport' // run unit tests and ui tests to generate code coverage report
                reports {
                    html.required.set(true)
                    html.outputLocation = layout.buildDirectory.dir('reports/jacoco')
                    xml.required.set(true) // It's required for Sonar
                    xml.outputLocation.set(file("${project.buildDir}/reports/jacoco/jacoco.xml"))
                }
                def mainSrc = "${project.projectDir}/src/main/java"
                def kotlinTree = fileTree(
                        dir: "$project.buildDir/tmp/kotlin-classes/debug",
                        excludes: [
                                '**/BuildConfig.*',
                                '**/*$*',
                                '**/Hilt_*.class',
                                'hilt_**',
                                'dagger/hilt/**',
                                '**/*JsonAdapter.*'
                        ]
                )
                sourceDirectories.from = file(mainSrc)
                classDirectories.from = files(kotlinTree)
                executionData.from = fileTree(dir: project.buildDir, includes: [
                        '**/*.exec', // unit tests
                        '**/*.ec' // ui tests
                ])
            }

            rootProject.tasks["sonar"].dependsOn ktlintCheck, tasks["detekt"], tasks["lint"], codeCoverage
            codeCoverage.mustRunAfter ktlintCheck, tasks["lint"]
        }
    }

    // Ktlint options: https://github.com/JLLeitschuh/ktlint-gradle#configuration
    ktlint {
        version = "0.48.2"
        android = true
        verbose = true
        reporters {
            reporter "html"
            reporter "json" // it's required for Sonar
        }
        filter {
            include("**/*.kt")
            exclude("**/build/**")
        }
    }

    // KtLint reports output directory: https://github.com/JLLeitschuh/ktlint-gradle#setting-reports-output-directory
    tasks.withType(org.jlleitschuh.gradle.ktlint.tasks.GenerateReportsTask) {
        reportsOutputDirectory = project.layout.buildDirectory.dir("reports/ktlint/$name")
    }

    // Detekt options: https://detekt.dev/docs/gettingstarted/gradle#groovy-dsl-3
    detekt {
        parallel = true
        allRules = true
        autoCorrect = true
        buildUponDefaultConfig = true
        setSource(files(projectDir))
        config.setFrom(file("${rootProject.rootDir}/config/detekt/detekt.yml"))
    }

    tasks.withType(Detekt).configureEach {
        // Detekt leveraging Gradle's SourceTask: https://detekt.dev/docs/gettingstarted/gradle/#leveraging-gradles-sourcetask---excluding-and-including-source-files
        include("**/*.kt")
        exclude("**/build/**")
        jvmTarget = JavaVersion.VERSION_11

        reports {
            txt.required.set(false)
            sarif.required.set(false)
            md.required.set(false)
            html.required.set(true)
            html.outputLocation.set(file("${project.buildDir}/reports/detekt/detekt.html"))
            xml.required.set(true)
            xml.outputLocation.set(file("${project.buildDir}/reports/detekt/detekt.xml")) // It's required for Sonar
        }
    }

    // Jacoco version: https://docs.gradle.org/current/userguide/jacoco_plugin.html#sec:configuring_the_jacoco_plugin
    jacoco {
        toolVersion = "0.8.10"
    }

    // Jacoco test options: https://docs.gradle.org/current/userguide/jacoco_plugin.html#default_values_of_the_jacoco_task_extension
    tasks.withType(Test) {
        jacoco {
            includeNoLocationClasses = true // Robolectric support
            excludes = ['jdk.internal.*'] // Java compatibility
        }
    }
}

// Gradle wrapper: https://docs.gradle.org/current/userguide/gradle_wrapper.html#customizing_wrapper
tasks.named('wrapper') {
    description = "Gradle wrapper task to update binary"
    gradleVersion = "8.1.1"
    distributionType = Wrapper.DistributionType.BIN
}

// Sonar properties: https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-gradle
sonar {
    description = "Sonar properties task"
    androidVariant = "debug"

    def localProperties = new Properties()
    localProperties.load(project.rootProject.file("local.properties").newDataInputStream())

    def ktlintReportPaths = subprojects
            .collect { fileTree("${it.buildDir}/reports/ktlint") }
            .findAll { !it.isEmpty() }
            .collect { it.matching { include '**/*.json' }.files.join(",") }

    // Sonar properties: https://docs.sonarqube.org/latest/analysis/analysis-parameters/
    properties {
        property("sonar.host.url", "http://localhost:9000")
        property("sonar.login", localProperties.getProperty("sonar_token"))
        property("sonar.projectName", rootProject.name)
        property("sonar.projectKey", application_id)
        property("sonar.projectVersion", version_name)
        property("sonar.sourceEncoding", "UTF-8")
        property("sonar.coverage.jacoco.xmlReportPaths", "**/build/reports/jacoco/jacoco.xml") // https://docs.sonarqube.org/9.9/analyzing-source-code/test-coverage/java-test-coverage
        // https://docs.sonarqube.org/9.9/analyzing-source-code/importing-external-issues/importing-third-party-issues/
        property("sonar.kotlin.detekt.reportPaths", "build/reports/detekt/detekt.xml")
        property("sonar.kotlin.ktlint.reportPaths", ktlintReportPaths)
    }
}